{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concat = exports.determineProcessUserAgentProperties = exports.validateInteger = exports.flattenAndStringify = exports.isObject = exports.emitWarning = exports.pascalToCamelCase = exports.callbackifyPromiseWithTimeout = exports.normalizeHeader = exports.normalizeHeaders = exports.removeNullish = exports.protoExtend = exports.getOptionsFromArgs = exports.getDataFromArgs = exports.extractUrlParams = exports.makeURLInterpolator = exports.stringifyRequestData = exports.isOptionsHash = void 0;\nvar qs = require(\"qs\");\nvar OPTIONS_KEYS = ['apiKey', 'idempotencyKey', 'stripeAccount', 'apiVersion', 'maxNetworkRetries', 'timeout', 'host'];\nfunction isOptionsHash(o) {\n  return o && typeof o === 'object' && OPTIONS_KEYS.some(function (prop) {\n    return Object.prototype.hasOwnProperty.call(o, prop);\n  });\n}\nexports.isOptionsHash = isOptionsHash;\n/**\n * Stringifies an Object, accommodating nested objects\n * (forming the conventional key 'parent[child]=value')\n */\nfunction stringifyRequestData(data) {\n  return qs.stringify(data, {\n    serializeDate: function serializeDate(d) {\n      return Math.floor(d.getTime() / 1000).toString();\n    }\n  })\n  // Don't use strict form encoding by changing the square bracket control\n  // characters back to their literals. This is fine by the server, and\n  // makes these parameter strings easier to read.\n  .replace(/%5B/g, '[').replace(/%5D/g, ']');\n}\nexports.stringifyRequestData = stringifyRequestData;\n/**\n * Outputs a new function with interpolated object property values.\n * Use like so:\n *   const fn = makeURLInterpolator('some/url/{param1}/{param2}');\n *   fn({ param1: 123, param2: 456 }); // => 'some/url/123/456'\n */\nexports.makeURLInterpolator = function () {\n  var rc = {\n    '\\n': '\\\\n',\n    '\"': '\\\\\"',\n    \"\\u2028\": \"\\\\u2028\",\n    \"\\u2029\": \"\\\\u2029\"\n  };\n  return function (str) {\n    var cleanString = str.replace(/[\"\\n\\r\\u2028\\u2029]/g, function ($0) {\n      return rc[$0];\n    });\n    return function (outputs) {\n      return cleanString.replace(/\\{([\\s\\S]+?)\\}/g, function ($0, $1) {\n        return (\n          // @ts-ignore\n          encodeURIComponent(outputs[$1] || '')\n        );\n      });\n    };\n  };\n}();\nfunction extractUrlParams(path) {\n  var params = path.match(/\\{\\w+\\}/g);\n  if (!params) {\n    return [];\n  }\n  return params.map(function (param) {\n    return param.replace(/[{}]/g, '');\n  });\n}\nexports.extractUrlParams = extractUrlParams;\n/**\n * Return the data argument from a list of arguments\n *\n * @param {object[]} args\n * @returns {object}\n */\nfunction getDataFromArgs(args) {\n  if (!Array.isArray(args) || !args[0] || typeof args[0] !== 'object') {\n    return {};\n  }\n  if (!isOptionsHash(args[0])) {\n    return args.shift();\n  }\n  var argKeys = Object.keys(args[0]);\n  var optionKeysInArgs = argKeys.filter(function (key) {\n    return OPTIONS_KEYS.includes(key);\n  });\n  // In some cases options may be the provided as the first argument.\n  // Here we're detecting a case where there are two distinct arguments\n  // (the first being args and the second options) and with known\n  // option keys in the first so that we can warn the user about it.\n  if (optionKeysInArgs.length > 0 && optionKeysInArgs.length !== argKeys.length) {\n    emitWarning(\"Options found in arguments (\".concat(optionKeysInArgs.join(', '), \"). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options.\"));\n  }\n  return {};\n}\nexports.getDataFromArgs = getDataFromArgs;\n/**\n * Return the options hash from a list of arguments\n */\nfunction getOptionsFromArgs(args) {\n  var opts = {\n    auth: null,\n    host: null,\n    headers: {},\n    settings: {}\n  };\n  if (args.length > 0) {\n    var arg = args[args.length - 1];\n    if (typeof arg === 'string') {\n      opts.auth = args.pop();\n    } else if (isOptionsHash(arg)) {\n      var params = Object.assign({}, args.pop());\n      var extraKeys = Object.keys(params).filter(function (key) {\n        return !OPTIONS_KEYS.includes(key);\n      });\n      if (extraKeys.length) {\n        emitWarning(\"Invalid options found (\".concat(extraKeys.join(', '), \"); ignoring.\"));\n      }\n      if (params.apiKey) {\n        opts.auth = params.apiKey;\n      }\n      if (params.idempotencyKey) {\n        opts.headers['Idempotency-Key'] = params.idempotencyKey;\n      }\n      if (params.stripeAccount) {\n        opts.headers['Stripe-Account'] = params.stripeAccount;\n      }\n      if (params.apiVersion) {\n        opts.headers['Stripe-Version'] = params.apiVersion;\n      }\n      if (Number.isInteger(params.maxNetworkRetries)) {\n        opts.settings.maxNetworkRetries = params.maxNetworkRetries;\n      }\n      if (Number.isInteger(params.timeout)) {\n        opts.settings.timeout = params.timeout;\n      }\n      if (params.host) {\n        opts.host = params.host;\n      }\n    }\n  }\n  return opts;\n}\nexports.getOptionsFromArgs = getOptionsFromArgs;\n/**\n * Provide simple \"Class\" extension mechanism.\n * <!-- Public API accessible via Stripe.StripeResource.extend -->\n */\nfunction protoExtend(sub) {\n  // eslint-disable-next-line @typescript-eslint/no-this-alias\n  var Super = this;\n  var Constructor = Object.prototype.hasOwnProperty.call(sub, 'constructor') ? sub.constructor : function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    Super.apply(this, args);\n  };\n  // This initialization logic is somewhat sensitive to be compatible with\n  // divergent JS implementations like the one found in Qt. See here for more\n  // context:\n  //\n  // https://github.com/stripe/stripe-node/pull/334\n  Object.assign(Constructor, Super);\n  Constructor.prototype = Object.create(Super.prototype);\n  Object.assign(Constructor.prototype, sub);\n  return Constructor;\n}\nexports.protoExtend = protoExtend;\n/**\n * Remove empty values from an object\n */\nfunction removeNullish(obj) {\n  if (typeof obj !== 'object') {\n    throw new Error('Argument must be an object');\n  }\n  return Object.keys(obj).reduce(function (result, key) {\n    if (obj[key] != null) {\n      result[key] = obj[key];\n    }\n    return result;\n  }, {});\n}\nexports.removeNullish = removeNullish;\n/**\n * Normalize standard HTTP Headers:\n * {'foo-bar': 'hi'}\n * becomes\n * {'Foo-Bar': 'hi'}\n */\nfunction normalizeHeaders(obj) {\n  if (!(obj && typeof obj === 'object')) {\n    return obj;\n  }\n  return Object.keys(obj).reduce(function (result, header) {\n    result[normalizeHeader(header)] = obj[header];\n    return result;\n  }, {});\n}\nexports.normalizeHeaders = normalizeHeaders;\n/**\n * Stolen from https://github.com/marten-de-vries/header-case-normalizer/blob/master/index.js#L36-L41\n * without the exceptions which are irrelevant to us.\n */\nfunction normalizeHeader(header) {\n  return header.split('-').map(function (text) {\n    return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();\n  }).join('-');\n}\nexports.normalizeHeader = normalizeHeader;\nfunction callbackifyPromiseWithTimeout(promise, callback) {\n  if (callback) {\n    // Ensure callback is called outside of promise stack.\n    return promise.then(function (res) {\n      setTimeout(function () {\n        callback(null, res);\n      }, 0);\n    }, function (err) {\n      setTimeout(function () {\n        callback(err, null);\n      }, 0);\n    });\n  }\n  return promise;\n}\nexports.callbackifyPromiseWithTimeout = callbackifyPromiseWithTimeout;\n/**\n * Allow for special capitalization cases (such as OAuth)\n */\nfunction pascalToCamelCase(name) {\n  if (name === 'OAuth') {\n    return 'oauth';\n  } else {\n    return name[0].toLowerCase() + name.substring(1);\n  }\n}\nexports.pascalToCamelCase = pascalToCamelCase;\nfunction emitWarning(warning) {\n  if (typeof process.emitWarning !== 'function') {\n    return console.warn(\"Stripe: \".concat(warning)); /* eslint-disable-line no-console */\n  }\n\n  return process.emitWarning(warning, 'Stripe');\n}\nexports.emitWarning = emitWarning;\nfunction isObject(obj) {\n  var type = typeof obj;\n  return (type === 'function' || type === 'object') && !!obj;\n}\nexports.isObject = isObject;\n// For use in multipart requests\nfunction flattenAndStringify(data) {\n  var result = {};\n  var step = function step(obj, prevKey) {\n    Object.keys(obj).forEach(function (key) {\n      // @ts-ignore\n      var value = obj[key];\n      var newKey = prevKey ? \"\".concat(prevKey, \"[\").concat(key, \"]\") : key;\n      if (isObject(value)) {\n        if (!(value instanceof Uint8Array) && !Object.prototype.hasOwnProperty.call(value, 'data')) {\n          // Non-buffer non-file Objects are recursively flattened\n          return step(value, newKey);\n        } else {\n          // Buffers and file objects are stored without modification\n          result[newKey] = value;\n        }\n      } else {\n        // Primitives are converted to strings\n        result[newKey] = String(value);\n      }\n    });\n  };\n  step(data, null);\n  return result;\n}\nexports.flattenAndStringify = flattenAndStringify;\nfunction validateInteger(name, n, defaultVal) {\n  if (!Number.isInteger(n)) {\n    if (defaultVal !== undefined) {\n      return defaultVal;\n    } else {\n      throw new Error(\"\".concat(name, \" must be an integer\"));\n    }\n  }\n  return n;\n}\nexports.validateInteger = validateInteger;\nfunction determineProcessUserAgentProperties() {\n  return typeof process === 'undefined' ? {} : {\n    lang_version: process.version,\n    platform: process.platform\n  };\n}\nexports.determineProcessUserAgentProperties = determineProcessUserAgentProperties;\n/**\n * Joins an array of Uint8Arrays into a single Uint8Array\n */\nfunction concat(arrays) {\n  var totalLength = arrays.reduce(function (len, array) {\n    return len + array.length;\n  }, 0);\n  var merged = new Uint8Array(totalLength);\n  var offset = 0;\n  arrays.forEach(function (array) {\n    merged.set(array, offset);\n    offset += array.length;\n  });\n  return merged;\n}\nexports.concat = concat;","map":null,"metadata":{},"sourceType":"script"}