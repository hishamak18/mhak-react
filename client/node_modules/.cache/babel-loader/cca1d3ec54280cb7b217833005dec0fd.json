{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestSender = void 0;\nvar Error_js_1 = require(\"./Error.js\");\nvar utils_js_1 = require(\"./utils.js\");\nvar HttpClient_js_1 = require(\"./net/HttpClient.js\");\nvar MAX_RETRY_AFTER_WAIT = 60;\nvar RequestSender = /*#__PURE__*/function () {\n  function RequestSender(stripe, maxBufferedRequestMetric) {\n    _classCallCheck(this, RequestSender);\n    this._stripe = stripe;\n    this._maxBufferedRequestMetric = maxBufferedRequestMetric;\n  }\n  _createClass(RequestSender, [{\n    key: \"_addHeadersDirectlyToObject\",\n    value: function _addHeadersDirectlyToObject(obj, headers) {\n      // For convenience, make some headers easily accessible on\n      // lastResponse.\n      // NOTE: Stripe responds with lowercase header names/keys.\n      obj.requestId = headers['request-id'];\n      obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n      obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n      obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n    }\n  }, {\n    key: \"_makeResponseEvent\",\n    value: function _makeResponseEvent(requestEvent, statusCode, headers) {\n      var requestEndTime = Date.now();\n      var requestDurationMs = requestEndTime - requestEvent.request_start_time;\n      return (0, utils_js_1.removeNullish)({\n        api_version: headers['stripe-version'],\n        account: headers['stripe-account'],\n        idempotency_key: headers['idempotency-key'],\n        method: requestEvent.method,\n        path: requestEvent.path,\n        status: statusCode,\n        request_id: this._getRequestId(headers),\n        elapsed: requestDurationMs,\n        request_start_time: requestEvent.request_start_time,\n        request_end_time: requestEndTime\n      });\n    }\n  }, {\n    key: \"_getRequestId\",\n    value: function _getRequestId(headers) {\n      return headers['request-id'];\n    }\n    /**\n     * Used by methods with spec.streaming === true. For these methods, we do not\n     * buffer successful responses into memory or do parse them into stripe\n     * objects, we delegate that all of that to the user and pass back the raw\n     * http.Response object to the callback.\n     *\n     * (Unsuccessful responses shouldn't make it here, they should\n     * still be buffered/parsed and handled by _jsonResponseHandler -- see\n     * makeRequest)\n     */\n  }, {\n    key: \"_streamingResponseHandler\",\n    value: function _streamingResponseHandler(requestEvent, callback) {\n      var _this = this;\n      return function (res) {\n        var headers = res.getHeaders();\n        var streamCompleteCallback = function streamCompleteCallback() {\n          var responseEvent = _this._makeResponseEvent(requestEvent, res.getStatusCode(), headers);\n          _this._stripe._emitter.emit('response', responseEvent);\n          _this._recordRequestMetrics(_this._getRequestId(headers), responseEvent.elapsed);\n        };\n        var stream = res.toStream(streamCompleteCallback);\n        // This is here for backwards compatibility, as the stream is a raw\n        // HTTP response in Node and the legacy behavior was to mutate this\n        // response.\n        _this._addHeadersDirectlyToObject(stream, headers);\n        return callback(null, stream);\n      };\n    }\n    /**\n     * Default handler for Stripe responses. Buffers the response into memory,\n     * parses the JSON and returns it (i.e. passes it to the callback) if there\n     * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n     */\n  }, {\n    key: \"_jsonResponseHandler\",\n    value: function _jsonResponseHandler(requestEvent, callback) {\n      var _this2 = this;\n      return function (res) {\n        var headers = res.getHeaders();\n        var requestId = _this2._getRequestId(headers);\n        var statusCode = res.getStatusCode();\n        var responseEvent = _this2._makeResponseEvent(requestEvent, statusCode, headers);\n        _this2._stripe._emitter.emit('response', responseEvent);\n        res.toJSON().then(function (jsonResponse) {\n          if (jsonResponse.error) {\n            var err;\n            // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n            if (typeof jsonResponse.error === 'string') {\n              jsonResponse.error = {\n                type: jsonResponse.error,\n                message: jsonResponse.error_description\n              };\n            }\n            jsonResponse.error.headers = headers;\n            jsonResponse.error.statusCode = statusCode;\n            jsonResponse.error.requestId = requestId;\n            if (statusCode === 401) {\n              err = new Error_js_1.StripeAuthenticationError(jsonResponse.error);\n            } else if (statusCode === 403) {\n              err = new Error_js_1.StripePermissionError(jsonResponse.error);\n            } else if (statusCode === 429) {\n              err = new Error_js_1.StripeRateLimitError(jsonResponse.error);\n            } else {\n              err = Error_js_1.StripeError.generate(jsonResponse.error);\n            }\n            throw err;\n          }\n          return jsonResponse;\n        }, function (e) {\n          throw new Error_js_1.StripeAPIError({\n            message: 'Invalid JSON received from the Stripe API',\n            exception: e,\n            requestId: headers['request-id']\n          });\n        }).then(function (jsonResponse) {\n          _this2._recordRequestMetrics(requestId, responseEvent.elapsed);\n          // Expose raw response object.\n          var rawResponse = res.getRawResponse();\n          _this2._addHeadersDirectlyToObject(rawResponse, headers);\n          Object.defineProperty(jsonResponse, 'lastResponse', {\n            enumerable: false,\n            writable: false,\n            value: rawResponse\n          });\n          callback(null, jsonResponse);\n        }, function (e) {\n          return callback(e, null);\n        });\n      };\n    }\n  }, {\n    key: \"_getSleepTimeInMS\",\n    value: function _getSleepTimeInMS(numRetries) {\n      var retryAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n      var maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n      // Apply exponential backoff with initialNetworkRetryDelay on the\n      // number of numRetries so far as inputs. Do not allow the number to exceed\n      // maxNetworkRetryDelay.\n      var sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay);\n      // Apply some jitter by randomizing the value in the range of\n      // (sleepSeconds / 2) to (sleepSeconds).\n      sleepSeconds *= 0.5 * (1 + Math.random());\n      // But never sleep less than the base sleep seconds.\n      sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n      // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n      if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n        sleepSeconds = Math.max(sleepSeconds, retryAfter);\n      }\n      return sleepSeconds * 1000;\n    } // Max retries can be set on a per request basis. Favor those over the global setting\n  }, {\n    key: \"_getMaxNetworkRetries\",\n    value: function _getMaxNetworkRetries() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return settings.maxNetworkRetries && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n    }\n  }, {\n    key: \"_defaultIdempotencyKey\",\n    value: function _defaultIdempotencyKey(method, settings) {\n      // If this is a POST and we allow multiple retries, ensure an idempotency key.\n      var maxRetries = this._getMaxNetworkRetries(settings);\n      if (method === 'POST' && maxRetries > 0) {\n        return \"stripe-node-retry-\".concat(this._stripe._platformFunctions.uuid4());\n      }\n      return null;\n    }\n  }, {\n    key: \"_makeHeaders\",\n    value: function _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n      var defaultHeaders = {\n        // Use specified auth token or use default from this stripe instance:\n        Authorization: auth ? \"Bearer \".concat(auth) : this._stripe.getApiField('auth'),\n        Accept: 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'User-Agent': this._getUserAgentString(),\n        'X-Stripe-Client-User-Agent': clientUserAgent,\n        'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n        'Stripe-Version': apiVersion,\n        'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n        'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings)\n      };\n      // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n      //   A user agent SHOULD send a Content-Length in a request message when\n      //   no Transfer-Encoding is sent and the request method defines a meaning\n      //   for an enclosed payload body.  For example, a Content-Length header\n      //   field is normally sent in a POST request even when the value is 0\n      //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n      //   Content-Length header field when the request message does not contain\n      //   a payload body and the method semantics do not anticipate such a\n      //   body.\n      //\n      // These method types are expected to have bodies and so we should always\n      // include a Content-Length.\n      var methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n      // If a content length was specified, we always include it regardless of\n      // whether the method semantics anticipate such a body. This keeps us\n      // consistent with historical behavior. We do however want to warn on this\n      // and fix these cases as they are semantically incorrect.\n      if (methodHasPayload || contentLength) {\n        if (!methodHasPayload) {\n          (0, utils_js_1.emitWarning)(\"\".concat(method, \" method had non-zero contentLength but no payload is expected for this verb\"));\n        }\n        defaultHeaders['Content-Length'] = contentLength;\n      }\n      return Object.assign((0, utils_js_1.removeNullish)(defaultHeaders),\n      // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n      (0, utils_js_1.normalizeHeaders)(userSuppliedHeaders));\n    }\n  }, {\n    key: \"_getUserAgentString\",\n    value: function _getUserAgentString() {\n      var packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n      var appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n      return \"Stripe/v1 NodeBindings/\".concat(packageVersion, \" \").concat(appInfo).trim();\n    }\n  }, {\n    key: \"_getTelemetryHeader\",\n    value: function _getTelemetryHeader() {\n      if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n        var metrics = this._stripe._prevRequestMetrics.shift();\n        return JSON.stringify({\n          last_request_metrics: metrics\n        });\n      }\n    }\n  }, {\n    key: \"_recordRequestMetrics\",\n    value: function _recordRequestMetrics(requestId, requestDurationMs) {\n      if (this._stripe.getTelemetryEnabled() && requestId) {\n        if (this._stripe._prevRequestMetrics.length > this._maxBufferedRequestMetric) {\n          (0, utils_js_1.emitWarning)('Request metrics buffer is full, dropping telemetry message.');\n        } else {\n          this._stripe._prevRequestMetrics.push({\n            request_id: requestId,\n            request_duration_ms: requestDurationMs\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_request\",\n    value: function _request(method, host, path, data, auth) {\n      var _this3 = this;\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var callback = arguments.length > 6 ? arguments[6] : undefined;\n      var requestDataProcessor = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n      var requestData;\n      var retryRequest = function retryRequest(requestFn, apiVersion, headers, requestRetries, retryAfter) {\n        return setTimeout(requestFn, _this3._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n      };\n      var makeRequest = function makeRequest(apiVersion, headers, numRetries) {\n        // timeout can be set on a per-request basis. Favor that over the global setting\n        var timeout = options.settings && options.settings.timeout && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : _this3._stripe.getApiField('timeout');\n        var req = _this3._stripe.getApiField('httpClient').makeRequest(host || _this3._stripe.getApiField('host'), _this3._stripe.getApiField('port'), path, method, headers, requestData, _this3._stripe.getApiField('protocol'), timeout);\n        var requestStartTime = Date.now();\n        // @ts-ignore\n        var requestEvent = (0, utils_js_1.removeNullish)({\n          api_version: apiVersion,\n          account: headers['Stripe-Account'],\n          idempotency_key: headers['Idempotency-Key'],\n          method: method,\n          path: path,\n          request_start_time: requestStartTime\n        });\n        var requestRetries = numRetries || 0;\n        var maxRetries = _this3._getMaxNetworkRetries(options.settings || {});\n        _this3._stripe._emitter.emit('request', requestEvent);\n        req.then(function (res) {\n          if (RequestSender._shouldRetry(res, requestRetries, maxRetries)) {\n            return retryRequest(makeRequest, apiVersion, headers, requestRetries,\n            // @ts-ignore\n            res.getHeaders()['retry-after']);\n          } else if (options.streaming && res.getStatusCode() < 400) {\n            return _this3._streamingResponseHandler(requestEvent, callback)(res);\n          } else {\n            return _this3._jsonResponseHandler(requestEvent, callback)(res);\n          }\n        }).catch(function (error) {\n          if (RequestSender._shouldRetry(null, requestRetries, maxRetries, error)) {\n            return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n          } else {\n            var isTimeoutError = error.code && error.code === HttpClient_js_1.HttpClient.TIMEOUT_ERROR_CODE;\n            return callback(new Error_js_1.StripeConnectionError({\n              message: isTimeoutError ? \"Request aborted due to timeout being reached (\".concat(timeout, \"ms)\") : RequestSender._generateConnectionErrorMessage(requestRetries),\n              // @ts-ignore\n              detail: error\n            }));\n          }\n        });\n      };\n      var prepareAndMakeRequest = function prepareAndMakeRequest(error, data) {\n        if (error) {\n          return callback(error);\n        }\n        requestData = data;\n        _this3._stripe.getClientUserAgent(function (clientUserAgent) {\n          var _a, _b;\n          var apiVersion = _this3._stripe.getApiField('version');\n          var headers = _this3._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, (_a = options.headers) !== null && _a !== void 0 ? _a : null, (_b = options.settings) !== null && _b !== void 0 ? _b : {});\n          makeRequest(apiVersion, headers, 0);\n        });\n      };\n      if (requestDataProcessor) {\n        requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n      } else {\n        prepareAndMakeRequest(null, (0, utils_js_1.stringifyRequestData)(data || {}));\n      }\n    }\n  }], [{\n    key: \"_generateConnectionErrorMessage\",\n    value: function _generateConnectionErrorMessage(requestRetries) {\n      return \"An error occurred with our connection to Stripe.\".concat(requestRetries > 0 ? \" Request was retried \".concat(requestRetries, \" times.\") : '');\n    } // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  }, {\n    key: \"_shouldRetry\",\n    value: function _shouldRetry(res, numRetries, maxRetries, error) {\n      if (error && numRetries === 0 && HttpClient_js_1.HttpClient.CONNECTION_CLOSED_ERROR_CODES.includes(error.code)) {\n        return true;\n      }\n      // Do not retry if we are out of retries.\n      if (numRetries >= maxRetries) {\n        return false;\n      }\n      // Retry on connection error.\n      if (!res) {\n        return true;\n      }\n      // The API may ask us not to retry (e.g., if doing so would be a no-op)\n      // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n      if (res.getHeaders()['stripe-should-retry'] === 'false') {\n        return false;\n      }\n      if (res.getHeaders()['stripe-should-retry'] === 'true') {\n        return true;\n      }\n      // Retry on conflict errors.\n      if (res.getStatusCode() === 409) {\n        return true;\n      }\n      // Retry on 500, 503, and other internal errors.\n      //\n      // Note that we expect the stripe-should-retry header to be false\n      // in most cases when a 500 is returned, since our idempotency framework\n      // would typically replay it anyway.\n      if (res.getStatusCode() >= 500) {\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return RequestSender;\n}();\nexports.RequestSender = RequestSender;","map":null,"metadata":{},"sourceType":"script"}