{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStripe = void 0;\nvar _Error = require(\"./Error.js\");\nvar apiVersion = require(\"./apiVersion.js\");\nvar resources = require(\"./resources.js\");\nvar HttpClient_js_1 = require(\"./net/HttpClient.js\");\nvar utils_js_1 = require(\"./utils.js\");\nvar CryptoProvider_js_1 = require(\"./crypto/CryptoProvider.js\");\nvar RequestSender_js_1 = require(\"./RequestSender.js\");\nvar StripeResource_js_1 = require(\"./StripeResource.js\");\nvar Webhooks_js_1 = require(\"./Webhooks.js\");\nvar DEFAULT_HOST = 'api.stripe.com';\nvar DEFAULT_PORT = '443';\nvar DEFAULT_BASE_PATH = '/v1/';\nvar DEFAULT_API_VERSION = apiVersion.ApiVersion;\nvar DEFAULT_TIMEOUT = 80000;\nvar MAX_NETWORK_RETRY_DELAY_SEC = 2;\nvar INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nvar APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nvar ALLOWED_CONFIG_PROPERTIES = ['apiVersion', 'typescript', 'maxNetworkRetries', 'httpAgent', 'httpClient', 'timeout', 'host', 'port', 'protocol', 'telemetry', 'appInfo', 'stripeAccount'];\nvar defaultRequestSenderFactory = function defaultRequestSenderFactory(stripe) {\n  return new RequestSender_js_1.RequestSender(stripe, StripeResource_js_1.StripeResource.MAX_BUFFERED_REQUEST_METRICS);\n};\nfunction createStripe(platformFunctions) {\n  var requestSender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultRequestSenderFactory;\n  Stripe.PACKAGE_VERSION = '12.4.0';\n  Stripe.USER_AGENT = Object.assign({\n    bindings_version: Stripe.PACKAGE_VERSION,\n    lang: 'node',\n    publisher: 'stripe',\n    uname: null,\n    typescript: false\n  }, (0, utils_js_1.determineProcessUserAgentProperties)());\n  Stripe.StripeResource = StripeResource_js_1.StripeResource;\n  Stripe.resources = resources;\n  Stripe.HttpClient = HttpClient_js_1.HttpClient;\n  Stripe.HttpClientResponse = HttpClient_js_1.HttpClientResponse;\n  Stripe.CryptoProvider = CryptoProvider_js_1.CryptoProvider;\n  function Stripe(key) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!(this instanceof Stripe)) {\n      return new Stripe(key, config);\n    }\n    var props = this._getPropsFromConfig(config);\n    this._platformFunctions = platformFunctions;\n    Object.defineProperty(this, '_emitter', {\n      value: this._platformFunctions.createEmitter(),\n      enumerable: false,\n      configurable: false,\n      writable: false\n    });\n    this.VERSION = Stripe.PACKAGE_VERSION;\n    this.on = this._emitter.on.bind(this._emitter);\n    this.once = this._emitter.once.bind(this._emitter);\n    this.off = this._emitter.removeListener.bind(this._emitter);\n    if (props.protocol && props.protocol !== 'https' && (!props.host || /\\.stripe\\.com$/.test(props.host))) {\n      throw new Error('The `https` protocol must be used when sending requests to `*.stripe.com`');\n    }\n    var agent = props.httpAgent || null;\n    this._api = {\n      auth: null,\n      host: props.host || DEFAULT_HOST,\n      port: props.port || DEFAULT_PORT,\n      protocol: props.protocol || 'https',\n      basePath: DEFAULT_BASE_PATH,\n      version: props.apiVersion || DEFAULT_API_VERSION,\n      timeout: (0, utils_js_1.validateInteger)('timeout', props.timeout, DEFAULT_TIMEOUT),\n      maxNetworkRetries: (0, utils_js_1.validateInteger)('maxNetworkRetries', props.maxNetworkRetries, 0),\n      agent: agent,\n      httpClient: props.httpClient || (agent ? this._platformFunctions.createNodeHttpClient(agent) : this._platformFunctions.createDefaultHttpClient()),\n      dev: false,\n      stripeAccount: props.stripeAccount || null\n    };\n    var typescript = props.typescript || false;\n    if (typescript !== Stripe.USER_AGENT.typescript) {\n      // The mutation here is uncomfortable, but likely fastest;\n      // serializing the user agent involves shelling out to the system,\n      // and given some users may instantiate the library many times without switching between TS and non-TS,\n      // we only want to incur the performance hit when that actually happens.\n      Stripe.USER_AGENT.typescript = typescript;\n    }\n    if (props.appInfo) {\n      this._setAppInfo(props.appInfo);\n    }\n    this._prepResources();\n    this._setApiKey(key);\n    this.errors = _Error;\n    this.webhooks = (0, Webhooks_js_1.createWebhooks)(platformFunctions);\n    this._prevRequestMetrics = [];\n    this._enableTelemetry = props.telemetry !== false;\n    this._requestSender = requestSender(this);\n    // Expose StripeResource on the instance too\n    // @ts-ignore\n    this.StripeResource = Stripe.StripeResource;\n  }\n  Stripe.errors = _Error;\n  Stripe.webhooks = Webhooks_js_1.createWebhooks;\n  Stripe.createNodeHttpClient = platformFunctions.createNodeHttpClient;\n  /**\n   * Creates an HTTP client for issuing Stripe API requests which uses the Web\n   * Fetch API.\n   *\n   * A fetch function can optionally be passed in as a parameter. If none is\n   * passed, will default to the default `fetch` function in the global scope.\n   */\n  Stripe.createFetchHttpClient = platformFunctions.createFetchHttpClient;\n  /**\n   * Create a CryptoProvider which uses the built-in Node crypto libraries for\n   * its crypto operations.\n   */\n  Stripe.createNodeCryptoProvider = platformFunctions.createNodeCryptoProvider;\n  /**\n   * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n   * Crypto API spec for its crypto operations.\n   *\n   * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n   * is passed, will default to the default `crypto.subtle` object in the global\n   * scope.\n   */\n  Stripe.createSubtleCryptoProvider = platformFunctions.createSubtleCryptoProvider;\n  Stripe.prototype = {\n    // Properties are set in the constructor above\n    _appInfo: undefined,\n    on: null,\n    off: null,\n    once: null,\n    VERSION: null,\n    StripeResource: null,\n    webhooks: null,\n    errors: null,\n    _api: null,\n    _prevRequestMetrics: null,\n    _emitter: null,\n    _enableTelemetry: null,\n    _requestSender: null,\n    _platformFunctions: null,\n    /**\n     * @private\n     */\n    _setApiKey: function _setApiKey(key) {\n      if (key) {\n        this._setApiField('auth', \"Bearer \".concat(key));\n      }\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setAppInfo: function _setAppInfo(info) {\n      if (info && typeof info !== 'object') {\n        throw new Error('AppInfo must be an object.');\n      }\n      if (info && !info.name) {\n        throw new Error('AppInfo.name is required');\n      }\n      info = info || {};\n      this._appInfo = APP_INFO_PROPERTIES.reduce(function (accum, prop) {\n        if (typeof info[prop] == 'string') {\n          accum = accum || {};\n          accum[prop] = info[prop];\n        }\n        return accum;\n      },\n      // @ts-ignore\n      undefined);\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setApiField: function _setApiField(key, value) {\n      this._api[key] = value;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getApiField: function getApiField(key) {\n      return this._api[key];\n    },\n    setClientId: function setClientId(clientId) {\n      this._clientId = clientId;\n    },\n    getClientId: function getClientId() {\n      return this._clientId;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getConstant: function getConstant(c) {\n      switch (c) {\n        case 'DEFAULT_HOST':\n          return DEFAULT_HOST;\n        case 'DEFAULT_PORT':\n          return DEFAULT_PORT;\n        case 'DEFAULT_BASE_PATH':\n          return DEFAULT_BASE_PATH;\n        case 'DEFAULT_API_VERSION':\n          return DEFAULT_API_VERSION;\n        case 'DEFAULT_TIMEOUT':\n          return DEFAULT_TIMEOUT;\n        case 'MAX_NETWORK_RETRY_DELAY_SEC':\n          return MAX_NETWORK_RETRY_DELAY_SEC;\n        case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n          return INITIAL_NETWORK_RETRY_DELAY_SEC;\n      }\n      return Stripe[c];\n    },\n    getMaxNetworkRetries: function getMaxNetworkRetries() {\n      return this.getApiField('maxNetworkRetries');\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setApiNumberField: function _setApiNumberField(prop, n, defaultVal) {\n      var val = (0, utils_js_1.validateInteger)(prop, n, defaultVal);\n      this._setApiField(prop, val);\n    },\n    getMaxNetworkRetryDelay: function getMaxNetworkRetryDelay() {\n      return MAX_NETWORK_RETRY_DELAY_SEC;\n    },\n    getInitialNetworkRetryDelay: function getInitialNetworkRetryDelay() {\n      return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     *\n     * Gets a JSON version of a User-Agent and uses a cached version for a slight\n     * speed advantage.\n     */\n    getClientUserAgent: function getClientUserAgent(cb) {\n      return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     *\n     * Gets a JSON version of a User-Agent by encoding a seeded object and\n     * fetching a uname from the system.\n     */\n    getClientUserAgentSeeded: function getClientUserAgentSeeded(seed, cb) {\n      var _this = this;\n      this._platformFunctions.getUname().then(function (uname) {\n        var _a;\n        var userAgent = {};\n        for (var field in seed) {\n          userAgent[field] = encodeURIComponent((_a = seed[field]) !== null && _a !== void 0 ? _a : 'null');\n        }\n        // URI-encode in case there are unusual characters in the system's uname.\n        userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n        var client = _this.getApiField('httpClient');\n        if (client) {\n          userAgent.httplib = encodeURIComponent(client.getClientName());\n        }\n        if (_this._appInfo) {\n          userAgent.application = _this._appInfo;\n        }\n        cb(JSON.stringify(userAgent));\n      });\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getAppInfoAsString: function getAppInfoAsString() {\n      if (!this._appInfo) {\n        return '';\n      }\n      var formatted = this._appInfo.name;\n      if (this._appInfo.version) {\n        formatted += \"/\".concat(this._appInfo.version);\n      }\n      if (this._appInfo.url) {\n        formatted += \" (\".concat(this._appInfo.url, \")\");\n      }\n      return formatted;\n    },\n    getTelemetryEnabled: function getTelemetryEnabled() {\n      return this._enableTelemetry;\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _prepResources: function _prepResources() {\n      for (var name in resources) {\n        // @ts-ignore\n        this[(0, utils_js_1.pascalToCamelCase)(name)] = new resources[name](this);\n      }\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _getPropsFromConfig: function _getPropsFromConfig(config) {\n      // If config is null or undefined, just bail early with no props\n      if (!config) {\n        return {};\n      }\n      // config can be an object or a string\n      var isString = typeof config === 'string';\n      var isObject = config === Object(config) && !Array.isArray(config);\n      if (!isObject && !isString) {\n        throw new Error('Config must either be an object or a string');\n      }\n      // If config is a string, we assume the old behavior of passing in a string representation of the api version\n      if (isString) {\n        return {\n          apiVersion: config\n        };\n      }\n      // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n      var values = Object.keys(config).filter(function (value) {\n        return !ALLOWED_CONFIG_PROPERTIES.includes(value);\n      });\n      if (values.length > 0) {\n        throw new Error(\"Config object may only contain the following: \".concat(ALLOWED_CONFIG_PROPERTIES.join(', ')));\n      }\n      return config;\n    }\n  };\n  return Stripe;\n}\nexports.createStripe = createStripe;","map":null,"metadata":{},"sourceType":"script"}