{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Accounts = void 0;\nvar StripeResource_js_1 = require(\"../StripeResource.js\");\nvar stripeMethod = StripeResource_js_1.StripeResource.method;\n// Since path can either be `account` or `accounts`, support both through stripeMethod path;\nexports.Accounts = StripeResource_js_1.StripeResource.extend({\n  create: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts'\n  }),\n  retrieve: function retrieve(id) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{id}'\n      }).apply(this, [id].concat(args));\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply([id].concat(args));\n      }\n      return stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/account'\n      }).apply(this, [id].concat(args));\n    }\n  },\n  update: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}'\n  }),\n  list: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts',\n    methodType: 'list'\n  }),\n  del: stripeMethod({\n    method: 'DELETE',\n    fullPath: '/v1/accounts/{account}'\n  }),\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/external_accounts'\n  }),\n  createLoginLink: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/login_links'\n  }),\n  createPerson: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/persons'\n  }),\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n  }),\n  deletePerson: stripeMethod({\n    method: 'DELETE',\n    fullPath: '/v1/accounts/{account}/persons/{person}'\n  }),\n  listCapabilities: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/capabilities',\n    methodType: 'list'\n  }),\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/external_accounts',\n    methodType: 'list'\n  }),\n  listPersons: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/persons',\n    methodType: 'list'\n  }),\n  reject: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/reject'\n  }),\n  retrieveCapability: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/capabilities/{capability}'\n  }),\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n  }),\n  retrievePerson: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/persons/{person}'\n  }),\n  updateCapability: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/capabilities/{capability}'\n  }),\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n  }),\n  updatePerson: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/persons/{person}'\n  })\n});","map":null,"metadata":{},"sourceType":"script"}