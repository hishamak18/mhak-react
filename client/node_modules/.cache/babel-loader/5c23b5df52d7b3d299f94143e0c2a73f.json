{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable camelcase */\nvar _classCallCheck = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _wrapNativeSuper = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StripeUnknownError = exports.StripeInvalidGrantError = exports.StripeIdempotencyError = exports.StripeSignatureVerificationError = exports.StripeConnectionError = exports.StripeRateLimitError = exports.StripePermissionError = exports.StripeAuthenticationError = exports.StripeAPIError = exports.StripeInvalidRequestError = exports.StripeCardError = exports.StripeError = exports.generate = void 0;\nvar generate = function generate(rawStripeError) {\n  switch (rawStripeError.type) {\n    case 'card_error':\n      return new StripeCardError(rawStripeError);\n    case 'invalid_request_error':\n      return new StripeInvalidRequestError(rawStripeError);\n    case 'api_error':\n      return new StripeAPIError(rawStripeError);\n    case 'authentication_error':\n      return new StripeAuthenticationError(rawStripeError);\n    case 'rate_limit_error':\n      return new StripeRateLimitError(rawStripeError);\n    case 'idempotency_error':\n      return new StripeIdempotencyError(rawStripeError);\n    case 'invalid_grant':\n      return new StripeInvalidGrantError(rawStripeError);\n    default:\n      return new StripeUnknownError(rawStripeError);\n  }\n};\nexports.generate = generate;\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\nvar StripeError = /*#__PURE__*/function (_Error) {\n  _inherits(StripeError, _Error);\n  function StripeError() {\n    var _this;\n    var raw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, StripeError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StripeError).call(this, raw.message));\n    _this.type = _this.constructor.name;\n    _this.raw = raw;\n    _this.rawType = raw.type;\n    _this.code = raw.code;\n    _this.doc_url = raw.doc_url;\n    _this.param = raw.param;\n    _this.detail = raw.detail;\n    _this.headers = raw.headers;\n    _this.requestId = raw.requestId;\n    _this.statusCode = raw.statusCode;\n    // @ts-ignore\n    _this.message = raw.message;\n    _this.charge = raw.charge;\n    _this.decline_code = raw.decline_code;\n    _this.payment_intent = raw.payment_intent;\n    _this.payment_method = raw.payment_method;\n    _this.payment_method_type = raw.payment_method_type;\n    _this.setup_intent = raw.setup_intent;\n    _this.source = raw.source;\n    return _this;\n  }\n  return StripeError;\n}(_wrapNativeSuper(Error));\nexports.StripeError = StripeError;\n/**\n * Helper factory which takes raw stripe errors and outputs wrapping instances\n */\nStripeError.generate = exports.generate;\n// Specific Stripe Error types:\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\nvar StripeCardError = /*#__PURE__*/function (_StripeError) {\n  _inherits(StripeCardError, _StripeError);\n  function StripeCardError() {\n    _classCallCheck(this, StripeCardError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeCardError).apply(this, arguments));\n  }\n  return StripeCardError;\n}(StripeError);\nexports.StripeCardError = StripeCardError;\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\nvar StripeInvalidRequestError = /*#__PURE__*/function (_StripeError2) {\n  _inherits(StripeInvalidRequestError, _StripeError2);\n  function StripeInvalidRequestError() {\n    _classCallCheck(this, StripeInvalidRequestError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeInvalidRequestError).apply(this, arguments));\n  }\n  return StripeInvalidRequestError;\n}(StripeError);\nexports.StripeInvalidRequestError = StripeInvalidRequestError;\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\nvar StripeAPIError = /*#__PURE__*/function (_StripeError3) {\n  _inherits(StripeAPIError, _StripeError3);\n  function StripeAPIError() {\n    _classCallCheck(this, StripeAPIError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeAPIError).apply(this, arguments));\n  }\n  return StripeAPIError;\n}(StripeError);\nexports.StripeAPIError = StripeAPIError;\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\nvar StripeAuthenticationError = /*#__PURE__*/function (_StripeError4) {\n  _inherits(StripeAuthenticationError, _StripeError4);\n  function StripeAuthenticationError() {\n    _classCallCheck(this, StripeAuthenticationError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeAuthenticationError).apply(this, arguments));\n  }\n  return StripeAuthenticationError;\n}(StripeError);\nexports.StripeAuthenticationError = StripeAuthenticationError;\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\nvar StripePermissionError = /*#__PURE__*/function (_StripeError5) {\n  _inherits(StripePermissionError, _StripeError5);\n  function StripePermissionError() {\n    _classCallCheck(this, StripePermissionError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripePermissionError).apply(this, arguments));\n  }\n  return StripePermissionError;\n}(StripeError);\nexports.StripePermissionError = StripePermissionError;\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\nvar StripeRateLimitError = /*#__PURE__*/function (_StripeError6) {\n  _inherits(StripeRateLimitError, _StripeError6);\n  function StripeRateLimitError() {\n    _classCallCheck(this, StripeRateLimitError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeRateLimitError).apply(this, arguments));\n  }\n  return StripeRateLimitError;\n}(StripeError);\nexports.StripeRateLimitError = StripeRateLimitError;\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\nvar StripeConnectionError = /*#__PURE__*/function (_StripeError7) {\n  _inherits(StripeConnectionError, _StripeError7);\n  function StripeConnectionError() {\n    _classCallCheck(this, StripeConnectionError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeConnectionError).apply(this, arguments));\n  }\n  return StripeConnectionError;\n}(StripeError);\nexports.StripeConnectionError = StripeConnectionError;\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\nvar StripeSignatureVerificationError = /*#__PURE__*/function (_StripeError8) {\n  _inherits(StripeSignatureVerificationError, _StripeError8);\n  function StripeSignatureVerificationError(header, payload) {\n    var _this2;\n    var raw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, StripeSignatureVerificationError);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(StripeSignatureVerificationError).call(this, raw));\n    _this2.header = header;\n    _this2.payload = payload;\n    return _this2;\n  }\n  return StripeSignatureVerificationError;\n}(StripeError);\nexports.StripeSignatureVerificationError = StripeSignatureVerificationError;\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\nvar StripeIdempotencyError = /*#__PURE__*/function (_StripeError9) {\n  _inherits(StripeIdempotencyError, _StripeError9);\n  function StripeIdempotencyError() {\n    _classCallCheck(this, StripeIdempotencyError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeIdempotencyError).apply(this, arguments));\n  }\n  return StripeIdempotencyError;\n}(StripeError);\nexports.StripeIdempotencyError = StripeIdempotencyError;\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\nvar StripeInvalidGrantError = /*#__PURE__*/function (_StripeError10) {\n  _inherits(StripeInvalidGrantError, _StripeError10);\n  function StripeInvalidGrantError() {\n    _classCallCheck(this, StripeInvalidGrantError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeInvalidGrantError).apply(this, arguments));\n  }\n  return StripeInvalidGrantError;\n}(StripeError);\nexports.StripeInvalidGrantError = StripeInvalidGrantError;\n/**\n * Any other error from Stripe not specifically captured above\n */\nvar StripeUnknownError = /*#__PURE__*/function (_StripeError11) {\n  _inherits(StripeUnknownError, _StripeError11);\n  function StripeUnknownError() {\n    _classCallCheck(this, StripeUnknownError);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeUnknownError).apply(this, arguments));\n  }\n  return StripeUnknownError;\n}(StripeError);\nexports.StripeUnknownError = StripeUnknownError;","map":null,"metadata":{},"sourceType":"script"}