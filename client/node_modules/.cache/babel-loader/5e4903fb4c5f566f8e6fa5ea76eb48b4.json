{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.multipartRequestDataProcessor = void 0;\nvar utils_js_1 = require(\"./utils.js\");\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nvar multipartDataGenerator = function multipartDataGenerator(method, data, headers) {\n  var segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n  headers['Content-Type'] = \"multipart/form-data; boundary=\".concat(segno);\n  var textEncoder = new TextEncoder();\n  var buffer = new Uint8Array(0);\n  var endBuffer = textEncoder.encode('\\r\\n');\n  function push(l) {\n    var prevBuffer = buffer;\n    var newBuffer = l instanceof Uint8Array ? l : new Uint8Array(textEncoder.encode(l));\n    buffer = new Uint8Array(prevBuffer.length + newBuffer.length + 2);\n    buffer.set(prevBuffer);\n    buffer.set(newBuffer, prevBuffer.length);\n    buffer.set(endBuffer, buffer.length - 2);\n  }\n  function q(s) {\n    return \"\\\"\".concat(s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' '), \"\\\"\");\n  }\n  var flattenedData = (0, utils_js_1.flattenAndStringify)(data);\n  for (var k in flattenedData) {\n    var v = flattenedData[k];\n    push(\"--\".concat(segno));\n    if (Object.prototype.hasOwnProperty.call(v, 'data')) {\n      var typedEntry = v;\n      push(\"Content-Disposition: form-data; name=\".concat(q(k), \"; filename=\").concat(q(typedEntry.name || 'blob')));\n      push(\"Content-Type: \".concat(typedEntry.type || 'application/octet-stream'));\n      push('');\n      push(typedEntry.data);\n    } else {\n      push(\"Content-Disposition: form-data; name=\".concat(q(k)));\n      push('');\n      push(v);\n    }\n  }\n  push(\"--\".concat(segno, \"--\"));\n  return buffer;\n};\nfunction multipartRequestDataProcessor(method, data, headers, callback) {\n  data = data || {};\n  if (method !== 'POST') {\n    return callback(null, (0, utils_js_1.stringifyRequestData)(data));\n  }\n  this._stripe._platformFunctions.tryBufferData(data).then(function (bufferedData) {\n    var buffer = multipartDataGenerator(method, bufferedData, headers);\n    return callback(null, buffer);\n  }).catch(function (err) {\n    return callback(err, null);\n  });\n}\nexports.multipartRequestDataProcessor = multipartRequestDataProcessor;","map":null,"metadata":{},"sourceType":"script"}