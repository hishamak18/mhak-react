{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/hishamak/Desktop/mhak-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClientResponse = exports.HttpClient = void 0;\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient() {\n    _classCallCheck(this, HttpClient);\n  }\n  _createClass(HttpClient, [{\n    key: \"getClientName\",\n    /** The client name used for diagnostics. */value: function getClientName() {\n      throw new Error('getClientName not implemented.');\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n      throw new Error('makeRequest not implemented.');\n    } /** Helper to make a consistent timeout error across implementations. */\n  }], [{\n    key: \"makeTimeoutError\",\n    value: function makeTimeoutError() {\n      var timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n      timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n      return timeoutErr;\n    }\n  }]);\n  return HttpClient;\n}();\nexports.HttpClient = HttpClient;\n// Public API accessible via Stripe.HttpClient\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\nvar HttpClientResponse = /*#__PURE__*/function () {\n  function HttpClientResponse(statusCode, headers) {\n    _classCallCheck(this, HttpClientResponse);\n    this._statusCode = statusCode;\n    this._headers = headers;\n  }\n  _createClass(HttpClientResponse, [{\n    key: \"getStatusCode\",\n    value: function getStatusCode() {\n      return this._statusCode;\n    }\n  }, {\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      return this._headers;\n    }\n  }, {\n    key: \"getRawResponse\",\n    value: function getRawResponse() {\n      throw new Error('getRawResponse not implemented.');\n    }\n  }, {\n    key: \"toStream\",\n    value: function toStream(streamCompleteCallback) {\n      throw new Error('toStream not implemented.');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      throw new Error('toJSON not implemented.');\n    }\n  }]);\n  return HttpClientResponse;\n}();\nexports.HttpClientResponse = HttpClientResponse;","map":null,"metadata":{},"sourceType":"script"}